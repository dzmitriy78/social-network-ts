{"version":3,"file":"static/js/977.55cc74f6.chunk.js","mappings":"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","sources":["webpack://react-kabzda-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/form/ProfileDataEditingForm.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-kabzda-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-kabzda-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://react-kabzda-1/./src/components/form/PostForm.module.css?e7ad","components/form/PostForm.tsx","components/form/formValidation/loginFormSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__mTenO\",\"name\":\"ProfileInfo_name__Y+G+R\",\"description\":\"ProfileInfo_description__EVTGP\",\"userPhoto\":\"ProfileInfo_userPhoto__dDpIg\",\"hidden\":\"ProfileInfo_hidden__RplzN\",\"btn\":\"ProfileInfo_btn__c+Qwe\",\"contactsEdit\":\"ProfileInfo_contactsEdit__R2DqX\",\"statusTitle\":\"ProfileInfo_statusTitle__zfyRA\",\"status\":\"ProfileInfo_status__pTVxB\"};","import React, {useEffect, useState} from 'react';\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\ninterface ProfileStatusPropsType {\r\n    status: string\r\n\r\n    updateStatus(status: string): void\r\n\r\n    isOwner: boolean\r\n    isAuth: boolean\r\n}\r\n\r\nconst ProfileStatus: React.FC<ProfileStatusPropsType> = ({\r\n                                                             updateStatus,\r\n                                                             status,\r\n                                                             isOwner,\r\n                                                             isAuth\r\n                                                         }) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n    useEffect(() => {\r\n        if (status) {\r\n            setNewStatus(status)\r\n        } else {\r\n            setNewStatus(\"\")\r\n        }\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        if (isAuth && isOwner)\r\n            setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(newStatus)\r\n    }\r\n\r\n    const onStatusChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.status}>\r\n            {!editMode\r\n                ? <div>\r\n                    <span className={classes.statusTitle} title={\"double click to change\"}\r\n                          onDoubleClick={activateEditMode}>\r\n                        {status || \"no Status\"}\r\n                    </span>\r\n                </div>\r\n                : <div>\r\n                    <input\r\n                        onChange={onStatusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode}\r\n                        value={newStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;","import React from \"react\";\r\nimport classes from \"../Profile/ProfileInfo/ProfileInfo.module.css\";\r\nimport {useFormik} from \"formik\";\r\nimport {ProfileType} from \"../Profile/ProfileContainer\";\r\n\r\nconst ProfileDataEditingForm: React.FC<ProfileDataEditingForm> = ({profile, saveProfile, error}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            contacts: profile.contacts || \"\"\r\n        },\r\n        onSubmit: (values) => {\r\n            saveProfile(values)\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div style={{color: \"darkorange\", fontSize: \"20px\"}}>{error}</div>\r\n            <div className={classes.description}>\r\n                <label htmlFor={'fullName'}><b>fullName: </b></label>\r\n                <input className={classes.contactsEdit} type='text'\r\n                       {...formik.getFieldProps(\"fullName\")}\r\n                />\r\n            </div>\r\n            <div className={classes.description}>\r\n                <label htmlFor={'lookingForAJob'}> <b>Looking for a job: </b></label>\r\n                <input className={classes.contactsEdit} type={'checkbox'} defaultChecked={profile.lookingForAJob}\r\n                       {...formik.getFieldProps(\"lookingForAJob\")}\r\n                />\r\n            </div>\r\n            <div className={classes.description}>\r\n                <label htmlFor={'lookingForAJobDescription'}> <b>My professional skills: </b></label>\r\n                <input className={classes.contactsEdit} type='text'\r\n                       {...formik.getFieldProps(\"lookingForAJobDescription\")}\r\n                />\r\n            </div>\r\n            <div className={classes.description}>\r\n                <label htmlFor={'aboutMe'}><b>AboutMe: </b></label>\r\n                <textarea className={classes.contactsEdit} {...formik.getFieldProps(\"aboutMe\")}\r\n                />\r\n            </div>\r\n            <div className={classes.description}>\r\n                <label htmlFor={'contacts'}><b>Contacts</b></label>: {Object.keys(profile.contacts)\r\n                .map((key, i) => {\r\n                    return <div key={i}>\r\n                        <b>{key}: <input className={classes.contactsEdit} type='text'\r\n                                         {...formik.getFieldProps(\"contacts.\" + key)}/>\r\n                        </b>\r\n                    </div>\r\n\r\n                })}\r\n            </div>\r\n\r\n            <button className={classes.btn} type={'submit'}>Send</button>\r\n        </form>\r\n    )\r\n}\r\nexport default ProfileDataEditingForm\r\n\r\ntype ValuesType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        github: string\r\n        instagram: string\r\n        mainLink: string\r\n        twitter: string\r\n        vk: string\r\n        website: string\r\n        youtube: string\r\n    }\r\n}\r\n\r\ntype ProfileDataEditingForm = {\r\n    error: string\r\n    profile: ProfileType\r\n    saveProfile(values: ValuesType): void\r\n}","import React from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\n\r\nconst Contacts: React.FC<ContactPropsType> = ({title, value}) => {\r\n    return <div>\r\n        <b>{title}</b>: {value}\r\n    </div>\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataType> = ({\r\n                                                           profile,\r\n                                                           isOwner,\r\n                                                           isAuth,\r\n                                                           goToEditMode\r\n                                                       }) => {\r\n    return (\r\n        <div className={classes.profileInfo}>\r\n            {isAuth && isOwner && <button className={classes.btn} onClick={goToEditMode}>Edit profile</button>}\r\n            <div className={classes.description}>\r\n                <div className={classes.name}>  {profile.fullName}</div>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <b>Looking for a job:</b>\r\n                <div>{profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <b>My professional skills:</b>\r\n                <div>{profile.lookingForAJobDescription}</div>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <b>AboutMe:</b>\r\n                <div>{profile.aboutMe}</div>\r\n            </div>\r\n            <div className={classes.description}>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts)\r\n                .map(key => {\r\n                    // @ts-ignore\r\n                    return <Contacts key={key} title={key} value={profile.contacts[key]}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    isAuth: boolean\r\n    goToEditMode(): void\r\n}\r\ntype ContactPropsType = {\r\n    title: string\r\n    value: string\r\n}","import React, {useRef} from \"react\";\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport userPhoto from \"./../../../assets/images/user.png\"\r\nimport ProfileDataEditingForm from \"../../form/ProfileDataEditingForm\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setEditMode, setError} from \"../../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport {ProfileData} from \"./ProfileData\";\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({\r\n                                                           profile,\r\n                                                           status,\r\n                                                           updateStatus,\r\n                                                           isOwner,\r\n                                                           savePhoto,\r\n                                                           saveProfile,\r\n                                                           error,\r\n                                                           editMode,\r\n                                                           isAuth\r\n                                                       }) => {\r\n    const dispatch = useDispatch()\r\n    const filePicker = useRef<HTMLInputElement>(null)\r\n\r\n    if (!profile) {\r\n        return (\r\n            <Preloader/>\r\n        )\r\n    }\r\n\r\n    const onPhotoSelect: React.ChangeEventHandler<HTMLInputElement> = (e) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const enableEditMode = () => {\r\n        dispatch(setEditMode(true))\r\n    }\r\n    const disableEditMode = () => {\r\n        dispatch(setEditMode(false))\r\n        dispatch(setError(\"\"))\r\n    }\r\n\r\n    const handlePick = () => {\r\n        filePicker.current?.click()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.profileInfo}>\r\n            <div className={classes.description}>\r\n                <img className={classes.userPhoto}\r\n                     src={profile.photos.large || userPhoto} alt={\"photos\"}/>\r\n                {isAuth && isOwner && <div>\r\n                    <button className={classes.btn} onClick={handlePick}>Change avatar</button>\r\n                    <input className={classes.hidden} type={\"file\"}\r\n                           onChange={onPhotoSelect}\r\n                           ref={filePicker}\r\n                           accept={\"image/*,.png, .jpg, .gif, .web\"}/></div>}\r\n                <ProfileStatus status={status}\r\n                               updateStatus={updateStatus}\r\n                               isOwner={isOwner}\r\n                               isAuth={isAuth}\r\n                />\r\n                {isAuth && isOwner && editMode && <button className={classes.btn} onClick={disableEditMode}>Cancel editing</button>}\r\n                {isAuth && isOwner && editMode\r\n                    ? <ProfileDataEditingForm profile={profile}\r\n                                              saveProfile={saveProfile}\r\n                                              error={error}/>\r\n                    : <ProfileData profile={profile}\r\n                                   goToEditMode={enableEditMode}\r\n                                   isOwner={isOwner}\r\n                                   isAuth={isAuth}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus(status: string): void\r\n    isOwner: boolean\r\n    isAuth: boolean\r\n    savePhoto(file: File): void\r\n    error: string\r\n    editMode: boolean\r\n    saveProfile(profile: ProfileType): void\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Bk92l\",\"posts\":\"MyPosts_posts__1pgcs\",\"btn\":\"MyPosts_btn__f4jRE\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__T4s02\",\"message\":\"Post_message__p7xhF\",\"likes\":\"Post_likes__6wObu\",\"btn\":\"Post_btn__2Dw85\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likes: number\r\n    deletePost(postId: number): void\r\n}\r\n\r\nexport const Post: React.FC<PostType> = ({deletePost, id, message, likes}) => {\r\n\r\n    let removePost = () => {\r\n        deletePost(id)\r\n    }\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src={\"https://shapka-youtube.ru/wp-content/uploads/2021/02/avatarka-dlya-skaypa-dlya-parney.jpg\"}\r\n                 alt={\"MyPost\"}/>\r\n            <span className={classes.message}>{message}</span>\r\n                <button className={classes.btn} onClick={removePost}>x</button>\r\n            <div className={classes.likes}>\r\n                <span>Likes: </span>\r\n                {likes}\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}","import {addPost, deletePost} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, {addPost, deletePost})(MyPosts)","import React from \"react\";\r\nimport classes from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport PostForm, {FormikValues} from \"../../form/PostForm\";\r\n\r\nexport type PostDataType = {\r\n    id: number\r\n    message: string\r\n    likeCount: number\r\n}\r\ntype MyPostsType = {\r\n    postData: Array<PostDataType>\r\n    addPost(text: string): void\r\n    deletePost(postId: number): void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const MyPosts: React.FC<MyPostsType> = ({postData, addPost, deletePost, isAuth}) => {\r\n\r\n    const deleteMyPost=(id: number)=>{\r\n        deletePost(id)\r\n    }\r\n\r\n    let postElement = postData\r\n        .map((p: PostDataType, i: number) =>\r\n            <Post key={i} id={p.id}\r\n                  message={p.message}\r\n                  deletePost={deleteMyPost}\r\n                  likes={p.likeCount}/>)\r\n\r\n\r\n    let addMyPost = (values: FormikValues) => {\r\n        addPost(values.text)\r\n    }\r\n    return isAuth ? (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostForm callback={addMyPost}/>\r\n                <div className={classes.posts}>\r\n                    {postElement}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) : <div></div>;\r\n}\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\nimport no_profile_img from \"./../../assets/images/noPofile.jpg\"\r\n\r\n\r\nexport const Profile: React.FC<ProfileProps> = ({\r\n                                                    profile,\r\n                                                    updateStatus,\r\n                                                    status,\r\n                                                    isOwner,\r\n                                                    savePhoto,\r\n                                                    saveProfile,\r\n                                                    error,\r\n                                                    editMode,\r\n                                                    isAuth\r\n                                                }) => {\r\n    if (!profile) {\r\n        return <div>\r\n            <img src={no_profile_img} alt={\"noProfileImg\"}/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatus={updateStatus}\r\n                         isOwner={isOwner}\r\n                         isAuth={isAuth}\r\n                         savePhoto={savePhoto}\r\n                         editMode={editMode}\r\n                         error={error}\r\n                         saveProfile={saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ProfileProps {\r\n    profile: ProfileType\r\n    status: string\r\n\r\n    updateStatus(status: string): void\r\n\r\n    isOwner: boolean\r\n    isAuth: boolean\r\n\r\n    savePhoto(file: File): void\r\n\r\n    error: string\r\n    editMode: boolean\r\n\r\n    saveProfile(profile: ProfileType): void\r\n}","import React, {useEffect} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfile, getStatus, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {Params, PathMatch, useMatch} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\nexport const ProfileURLMatch = (Component: any) => {\r\n    let RouterComponent: (props: ProfileContainerPropsType) => JSX.Element;\r\n    RouterComponent = (props: ProfileContainerPropsType) => {\r\n        const match = useMatch('/profile/:userId/');\r\n        return <Component {...props} match={match}/>;\r\n    };\r\n    return RouterComponent\r\n}\r\n\r\nconst ProfileContainer: React.FC<ProfileContainerPropsType> = ({\r\n                                                                   profile,\r\n                                                                   getProfile,\r\n                                                                   getStatus,\r\n                                                                   updateStatus,\r\n                                                                   status,\r\n                                                                   meId,\r\n                                                                   match,\r\n                                                                   savePhoto,\r\n                                                                   saveProfile,\r\n                                                                   editMode,\r\n                                                                   error, isAuth\r\n                                                               }) => {\r\n    useEffect(() => {\r\n        let userId = match\r\n            ? match.params.userId\r\n            : meId;\r\n        if (userId) {\r\n            getProfile(userId as number)\r\n            getStatus(userId as number)\r\n        }\r\n    }, [match?.params.userId])\r\n\r\n    return (\r\n        <Profile profile={profile}\r\n                 status={status}\r\n                 updateStatus={updateStatus}\r\n                 isOwner={!match?.params.userId}\r\n                 savePhoto={savePhoto}\r\n                 editMode={editMode}\r\n                 error={error}\r\n                 saveProfile={saveProfile}\r\n                 isAuth={isAuth}/>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        meId: state.auth.userId,\r\n        error: state.profilePage.error,\r\n        editMode: state.profilePage.editMode,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    ProfileURLMatch,\r\n    /* withAuthRedirect*/)\r\n(ProfileContainer)\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        github: string\r\n        instagram: string\r\n        mainLink: string\r\n        twitter: string\r\n        vk: string\r\n        website: string\r\n        youtube: string\r\n    }\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: { small: string, large: string }\r\n    userId: number\r\n}\r\nexport type ProfileContainerPropsType = {\r\n    profile: ProfileType\r\n    match?: PathMatch | null\r\n    params?: Params\r\n    getProfile(userId: number): void\r\n    getStatus(userId: number): void\r\n    status: string\r\n    updateStatus(status: string): void\r\n    meId: number\r\n    userId: number\r\n    savePhoto(file: File): void\r\n    error: string\r\n    editMode: boolean\r\n    saveProfile(profile: ProfileType): void\r\n    isAuth: boolean\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"PostForm_errorMessage__0Y8By\"};","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport classes from \"./PostForm.module.css\"\r\nimport {postFormSchema} from \"./formValidation/loginFormSchema\";\r\n\r\nconst PostForm: React.FC<PostFormProps> = ({callback}) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{text: \"\"}}\r\n                validate={values => {\r\n                    const errors: Errors = {};\r\n                    if (!values.text) {\r\n                        errors.text = 'Enter your message'\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values, actions) => {\r\n                    callback(values)\r\n                    actions.resetForm({values: {text: \"\"}})\r\n                }}\r\n                validationSchema={postFormSchema}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <div>`\r\n                            <Field component={'textarea'}\r\n                                   name={'text'}\r\n                                   placeholder={'write a message'}/>\r\n                        </div>\r\n                        <div className={classes.errorMessage}>\r\n                            <ErrorMessage name=\"text\" component=\"div\"/>\r\n                        </div>\r\n                        <button style={{cursor:\"pointer\"}} type={'submit'}>Add post</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostForm;\r\n\r\nexport interface FormikValues {\r\n    text: string\r\n}\r\n\r\ninterface Errors {\r\n    text?: string\r\n}\r\n\r\ninterface PostFormProps {\r\n    callback: (values: FormikValues) => void\r\n}\r\n","import * as Yup from \"yup\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(4, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n});\r\n\r\nexport const postFormSchema = Yup.object().shape({\r\n    text: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters!\")\r\n        .max(50, \"Post length no more than 50 characters!\")\r\n        .required(\"Required\")\r\n})"],"names":["updateStatus","status","isOwner","isAuth","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","className","classes","onChange","e","currentTarget","value","autoFocus","onBlur","title","onDoubleClick","profile","saveProfile","error","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","onSubmit","values","handleSubmit","style","color","fontSize","htmlFor","type","getFieldProps","defaultChecked","Object","keys","map","key","i","Contacts","ProfileData","goToEditMode","onClick","ProfileInfo","savePhoto","dispatch","useDispatch","filePicker","useRef","Preloader","src","photos","large","userPhoto","alt","current","click","target","files","length","ref","accept","setError","Post","deletePost","id","message","likes","MyPostsContainer","connect","state","postData","profilePage","auth","addPost","deleteMyPost","postElement","p","likeCount","PostForm","callback","text","Profile","no_profile_img","ProfileURLMatch","Component","props","match","useMatch","compose","meId","userId","getProfile","getStatus","params","validate","errors","actions","resetForm","validationSchema","postFormSchema","component","name","placeholder","cursor","loginFormSchema","Yup","shape","password","min","required","max"],"sourceRoot":""}