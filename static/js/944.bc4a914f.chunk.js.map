{"version":3,"file":"static/js/944.bc4a914f.chunk.js","mappings":"oMAuFA,WAAeA,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAA2C,CAC/DC,OAAQD,EAAME,KAAKD,OADC,GAIgB,CAACE,MAAAA,EAAAA,IAAzC,EA9DwC,SAAC,GAAqB,IAApBA,EAAmB,EAAnBA,MAEtC,OAFyD,EAAZF,QAGlC,SAAC,KAAD,CAAUG,SAAO,EAACC,GAAG,cAG5B,4BACI,mCACA,4KACA,uDAC6B,kBAD7B,qBAKA,SAAC,KAAD,CACIC,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIC,YAAY,GACrDC,SAAU,SAAAC,GACN,IAAMC,EAAiB,CAAC,EAQxB,OAPKD,EAAOJ,MAGP,yCAAyCM,KAAKF,EAAOJ,SAEtDK,EAAOL,MAAQ,yBAJfK,EAAOL,MAAQ,WAMZK,CACV,EACDE,SAAU,SAACH,EAAD,GAAkC,IAAhBI,EAAe,EAAfA,UACxBZ,EAAMQ,EAAOJ,MAAOI,EAAOH,SAAUG,EAAOF,WAAYM,EAC3D,EACDC,iBAAkBC,EAAAA,EAhBtB,SAiBK,gBAAEC,EAAF,EAAEA,OAAF,OACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CAAOC,KAAM,OAAQC,KAAM,QAASC,YAAa,cAErD,gBAAKC,MAAO,CAACC,MAAO,UAApB,UACI,SAAC,KAAD,CAAcH,KAAK,QAAQI,UAAU,WAEzC,0BACI,SAAC,KAAD,CAAOL,KAAM,WAAYC,KAAM,WAAYC,YAAa,gBAE5D,gBAAKC,MAAO,CAACC,MAAO,UAApB,UACI,SAAC,KAAD,CAAcH,KAAK,WAAWI,UAAU,WAE5C,4BACI,SAAC,KAAD,CAAOL,KAAM,WAAYC,KAAM,gBAC/B,kBAAOK,QAAS,aAAhB,+BAEJ,gBAAKH,MAAO,CAACC,MAAO,UAApB,SAAgCL,GAAS,0BAAOA,IAAiB,QACjE,mBAAQC,KAAM,SAAd,sBAnBP,MAyBhB,G,0FC/EYF,EAAkBS,EAAAA,KAAaC,MAAM,CAC9CnB,SAAUkB,EAAAA,KACLE,IAAI,EAAG,oCACPC,SAAS,cAGLC,EAAiBJ,EAAAA,KAAaC,MAAM,CAC7CI,KAAML,EAAAA,KACDE,IAAI,EAAG,qCACPI,IAAI,GAAI,2CACRH,SAAS,a","sources":["components/Login/Login.tsx","components/form/formValidation/loginFormSchema.ts"],"sourcesContent":["\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {loginFormSchema} from \"../form/formValidation/loginFormSchema\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\n\r\n\r\ninterface Values {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ninterface Errors {\r\n    email?: string\r\n}\r\n\r\ninterface LoginPropsType {\r\n    isAuth: boolean\r\n\r\n    login(email: string, password: string, rememberMe: boolean, setStatus: (status: string) => void): void\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({login, isAuth}) => {\r\n\r\n    if (isAuth) {\r\n        return <Navigate replace to=\"/profile\"/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <h3>Данные тестового аккаунта: </h3>\r\n            <h4>\r\n                Email: free@samuraijs.com<br/>\r\n                Password: free\r\n            </h4>\r\n\r\n            <Formik\r\n                initialValues={{email: \"\", password: \"\", rememberMe: false}}\r\n                validate={values => {\r\n                    const errors: Errors = {};\r\n                    if (!values.email) {\r\n                        errors.email = 'Required';\r\n                    } else if (\r\n                        !/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = 'Invalid email address';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={(values: Values, {setStatus}) => {\r\n                    login(values.email, values.password, values.rememberMe, setStatus)\r\n                }}\r\n                validationSchema={loginFormSchema}>\r\n                {({status}) => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field type={'text'} name={'email'} placeholder={'e-mail'}/>\r\n                        </div>\r\n                        <div style={{color: \"orange\"}}>\r\n                            <ErrorMessage name=\"email\" component=\"div\"/>\r\n                        </div>\r\n                        <div>\r\n                            <Field type={'password'} name={'password'} placeholder={'password'}/>\r\n                        </div>\r\n                        <div style={{color: \"orange\"}}>\r\n                            <ErrorMessage name=\"password\" component=\"div\"/>\r\n                        </div>\r\n                        <div>\r\n                            <Field type={'checkbox'} name={'rememberMe'}/>\r\n                            <label htmlFor={'rememberMe'}> remember me </label>\r\n                        </div>\r\n                        <div style={{color: \"orange\"}}>{status ? <span>{status}</span> : null}</div>\r\n                        <button type={'submit'}>Log in</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: { auth: { isAuth: boolean } }) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import * as Yup from \"yup\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(4, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n});\r\n\r\nexport const postFormSchema = Yup.object().shape({\r\n    text: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters!\")\r\n        .max(50, \"Post length no more than 50 characters!\")\r\n        .required(\"Required\")\r\n})"],"names":["connect","state","isAuth","auth","login","replace","to","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","setStatus","validationSchema","loginFormSchema","status","type","name","placeholder","style","color","component","htmlFor","Yup","shape","min","required","postFormSchema","text","max"],"sourceRoot":""}