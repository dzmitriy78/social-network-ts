{"version":3,"file":"static/js/44.fa1523fb.chunk.js","mappings":"0OACA,G,QAAwB,sBAAxB,EAAsD,sB,SC+FtD,GAAeA,EAAAA,EAAAA,KALS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,WAFH,GAKgB,CAACC,MAAAA,EAAAA,IAAzC,EApEwC,SAAC,GAAiC,IAAhCA,EAA+B,EAA/BA,MAAOH,EAAwB,EAAxBA,OAAQE,EAAgB,EAAhBA,WAErD,OAAIF,GACO,SAAC,KAAD,CAAUI,SAAO,EAACC,GAAG,cAG5B,iBAAKC,UAAWC,EAAhB,WACI,oCACA,4KACA,uDAC6B,kBAD7B,qBAKA,SAAC,KAAD,CACIC,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIC,YAAY,EAAOC,QAAS,IACrEC,SAAU,SAAAC,GACN,IAAMC,EAAiB,CAAC,EAQxB,OAPKD,EAAOL,MAGP,yCAAyCO,KAAKF,EAAOL,SAEtDM,EAAON,MAAQ,yBAJfM,EAAON,MAAQ,WAMZM,CACV,EACDE,SAAQ,yCAAE,WAAOH,EAAP,sFAAwBI,EAAxB,EAAwBA,UAAxB,SACDf,EAAMW,EAAOL,MAAOK,EAAOJ,SAAUI,EAAOH,WAAYG,EAAOF,QAASM,GADvE,2CAAF,wDAGRC,iBAAkBC,EAAAA,EAhBtB,SAiBK,gBAAEC,EAAF,EAAEA,OAAF,OACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CAAOC,KAAM,OAAQC,KAAM,QAASC,YAAa,cAErD,gBAAKC,MAAO,CAACC,MAAO,UAApB,UACI,SAAC,KAAD,CAAcH,KAAK,QAAQI,UAAU,WAEzC,0BACI,SAAC,KAAD,CAAOL,KAAM,WAAYC,KAAM,WAAYC,YAAa,gBAE5D,gBAAKC,MAAO,CAACC,MAAO,UAApB,UACI,SAAC,KAAD,CAAcH,KAAK,WAAWI,UAAU,WAE5C,4BACI,SAAC,KAAD,CAAOL,KAAM,WAAYC,KAAM,gBAC/B,kBAAOK,QAAS,aAAhB,+BAEJ,gBAAKH,MAAO,CAACC,MAAO,UAApB,SAAgCL,GAAS,0BAAOA,IAAiB,QACjE,2BACKnB,IAAc,gBAAK2B,IAAK3B,EAAY4B,IAAK,YACzC5B,IAAc,SAAC,KAAD,CAAOoB,KAAM,OAAQC,KAAM,UAAWC,YAAa,uBAGtE,mBAAQlB,UAAWC,EAAgBe,KAAM,SAAzC,sBAxBP,MA8BhB,G,0FCvFYF,EAAkBW,EAAAA,KAAaC,MAAM,CAC9CtB,SAAUqB,EAAAA,KACLE,IAAI,EAAG,oCACPC,SAAS,cAGLC,EAAiBJ,EAAAA,KAAaC,MAAM,CAC7CI,KAAML,EAAAA,KACDE,IAAI,EAAG,qCACPI,IAAI,GAAI,2CACRH,SAAS,a","sources":["webpack://react-kabzda-1/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/form/formValidation/loginFormSchema.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__bTJU9\",\"button\":\"Login_button__rsabU\"};","import {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {loginFormSchema} from \"../form/formValidation/loginFormSchema\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport classes from \"./Login.module.css\"\r\n\r\n\r\ninterface Values {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ninterface Errors {\r\n    email?: string\r\n}\r\n\r\ninterface LoginPropsType {\r\n\r\n    isAuth: boolean\r\n    captchaUrl: string | null | undefined;\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string, setStatus: (status: string) => void) => Promise<void>\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = ({login, isAuth, captchaUrl}) => {\r\n\r\n    if (isAuth) {\r\n        return <Navigate replace to=\"/profile\"/>\r\n    }\r\n    return (\r\n        <div className={classes.login}>\r\n            <h1>Log in</h1>\r\n            <h3>Данные тестового аккаунта: </h3>\r\n            <h4>\r\n                Email: free@samuraijs.com<br/>\r\n                Password: free\r\n            </h4>\r\n\r\n            <Formik\r\n                initialValues={{email: \"\", password: \"\", rememberMe: false, captcha: \"\"}}\r\n                validate={values => {\r\n                    const errors: Errors = {};\r\n                    if (!values.email) {\r\n                        errors.email = 'Required';\r\n                    } else if (\r\n                        !/^[A-Z\\d._%+-]+@[A-Z\\d.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = 'Invalid email address';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={async (values: Values, {setStatus}) => {\r\n                   await login(values.email, values.password, values.rememberMe, values.captcha, setStatus)\r\n                }}\r\n                validationSchema={loginFormSchema}>\r\n                {({status}) => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field type={'text'} name={'email'} placeholder={'e-mail'}/>\r\n                        </div>\r\n                        <div style={{color: \"orange\"}}>\r\n                            <ErrorMessage name=\"email\" component=\"div\"/>\r\n                        </div>\r\n                        <div>\r\n                            <Field type={'password'} name={'password'} placeholder={'password'}/>\r\n                        </div>\r\n                        <div style={{color: \"orange\"}}>\r\n                            <ErrorMessage name=\"password\" component=\"div\"/>\r\n                        </div>\r\n                        <div>\r\n                            <Field type={'checkbox'} name={'rememberMe'}/>\r\n                            <label htmlFor={'rememberMe'}> remember me </label>\r\n                        </div>\r\n                        <div style={{color: \"orange\"}}>{status ? <span>{status}</span> : null}</div>\r\n                        <div>\r\n                            {captchaUrl && <img src={captchaUrl} alt={'captcha'}/>}\r\n                            {captchaUrl && <Field type={'text'} name={'captcha'} placeholder={'insert captcha'}/>}\r\n\r\n                        </div>\r\n                        <button className={classes.button} type={'submit'}>Log in</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import * as Yup from \"yup\";\r\n\r\nexport const loginFormSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n        .min(4, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n});\r\n\r\nexport const postFormSchema = Yup.object().shape({\r\n    text: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters!\")\r\n        .max(50, \"Post length no more than 50 characters!\")\r\n        .required(\"Required\")\r\n})"],"names":["connect","state","isAuth","auth","captchaUrl","login","replace","to","className","classes","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","onSubmit","setStatus","validationSchema","loginFormSchema","status","type","name","placeholder","style","color","component","htmlFor","src","alt","Yup","shape","min","required","postFormSchema","text","max"],"sourceRoot":""}